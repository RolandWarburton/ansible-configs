- name: Check if Neovim package is installed
  command: nvim --version | head -n 1 | grep -Po '\d+\.\d+\.\d+'
  register: neovim_output
  ignore_errors: yes
  changed_when: false

- name: debug
  debug:
    msg: "{{ neovim_output.stdout | default('neovim version not found') }}"

- name: Extract Neovim version number
  set_fact:
    neovim_version: '{{ neovim_output.stdout }}'
  when: neovim_output.rc == 0

- name: Set fact indicating Neovim installation status
  set_fact:
    neovim_installed: '{{ true if neovim_output.rc == 0 else false }}'

- name: print neovim version
  debug:
    msg: "neovim {{ 'is installed' if neovim_version is defined else 'is not isntalled' }}{{ ' (version ' + neovim_version[0]|string + ')' if neovim_version is defined else '' }}"

- name: set neovim_version to 0.0.0 if not installed
  set_fact:
    neovim_version: '0.0.0'
  when: not neovim_installed

- name: Check version comparison of target and actual neovim versions
  command: dpkg --compare-versions "{{ neovim_target_version }}" gt "{{ neovim_version[0] }}"
  register: version_comparison
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: skip running neovim upgrade
  debug:
    msg: 'skipping upgrade as target version {{neovim_target_version}} is gte current version {{neovim_version[0]}}'
  when: version_comparison.rc != 0

- name: set flag if target version is greater than the actual version of neovim
  set_fact:
    target_neovim_version_is_greater: true
  when: version_comparison.rc == 0

- block:
    - name: download neovim update
      debug:
        msg: 'Updating neovim to v{{neovim_target_version}}'

    - name: install packages for building neovim
      apt:
        update_cache: yes
        pkg:
          - luarocks
          - build-essential
          - cmake
          - fzf

    - name: check if nvim deb is downloaded
      stat:
        path: /tmp/nvim-linux64.deb
      register: nvim_deb_stat

    - block:
        - name: install packages
          apt:
            update_cache: yes
            pkg:
              - cmake
              - gettext

        - name: clone neovim
          become_user: "{{username}}"
          git:
            repo: "https://github.com/neovim/neovim.git"
            dest: "/tmp/neovim"
            version: "v{{neovim_target_version}}"

        - name: Build Neovim
          become_user: "{{ username }}"
          shell: |
            cd /tmp/neovim
            make CMAKE_BUILD_TYPE=Release
          args:
            creates: /tmp/neovim/build

        - name: Install Neovim
          become: true
          shell: |
            cd /tmp/neovim
            make install
      when: ansible_architecture == "aarch64"

    - block:
        - name: download neovim
          get_url:
            url: https://github.com/neovim/neovim/releases/download/v{{neovim_target_version}}/nvim-linux-x86_64.tar.gz
            dest: /tmp/nvim-linux-x86_64.tar.gz
            mode: '0755'
            group: '{{username}}'
            owner: '{{username}}'
          register: nvim_downloaded
          when: nvim_deb_stat.stat.islnk is not defined # the file does not exist

        - name: Unzip Neovim tar gz
          ansible.builtin.unarchive:
            src: /tmp/nvim-linux-x86_64.tar.gz
            dest: /tmp
            remote_src: true

        - name: Copy nvim to /usr/bin/nvim
          ansible.builtin.copy:
            src: /tmp/nvim-linux-x86_64
            dest: /usr/bin
            remote_src: true
            mode: '0755'
            group: '{{username}}'
            owner: '{{username}}'

        - name: Create symbolic link for nvim binary
          ansible.builtin.file:
            src: /usr/bin/nvim-linux-x86_64/bin/nvim
            dest: /usr/bin/nvim
            state: link
            force: yes
      when: ansible_architecture == "x86_64"

  when: target_neovim_version_is_greater is defined or not neovim_installed

# download nvim config
- name: Check if nvim config exists
  stat:
    path: /home/{{ username }}/.config/nvim
  register: nvim_config_stat

- name: clone neovim config
  become_user: '{{username}}'
  git:
    repo: git@github.com:rolandwarburton/nvim.conf.git
    dest: /home/{{username}}/.config/nvim
    accept_hostkey: yes
    track_submodules: yes
    recursive: yes
    version: master
    force: yes
    key_file: /home/{{username}}/.ssh/id_github # on the remote host
  when: not nvim_config_stat.stat.exists

# update the debian alternatives/preferences
# to set neovim as the preferred text editor
- name: Check if nvim is already registered as an alternative for editor
  command: update-alternatives --query editor
  register: editor_alternatives
  changed_when: false
  failed_when: false

- name: Register nvim as an alternative for editor
  command: update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 100
  when: "'/usr/bin/nvim' not in editor_alternatives.stdout"
  register: nvim_registered

- name: Set Neovim as the default editor
  command: >
    update-alternatives --set editor /usr/bin/nvim
  when: nvim_registered is changed
  register: nvim_set
  changed_when: nvim_set.rc == 0
