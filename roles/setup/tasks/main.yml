- name: ensure locale is set to {{ config_system_locale }}
  import_tasks: locale.yml

- name: install packages
  apt: 
    update_cache: yes
    pkg:
      - git
      - ssh
      - sudo
      - curl
      - wget
      - python3
      - python3-pip
      - zsh
      - luarocks
      - build-essential
      - cmake

- name: check if device is laptop
  shell:
    cmd: 'dmidecode | grep Version'
  register: dmidecode_version

- name: install laptop specific packages
  apt:
    update_cache: no
    pkg:
      - firmware-iwlwifi
      - network-manager
      - acpi
  when: >
    (dmidecode_version.stdout is search('ThinkPad'))

- name: set zsh to be the default shell
  user:
    name: "{{username}}"
    shell: /usr/bin/zsh

- name: get dotfiles
  become_user: '{{username}}'
  git:
    repo: git@github.com:rolandwarburton/dotfiles.git
    dest: /home/{{username}}/dotfiles
    accept_hostkey: yes
    key_file: /home/{{username}}/.ssh/id_github # on the remote host

- name: install dotbot
  become_user: '{{username}}'
  pip:
    name: dotbot
    executable: pip3

- name: run dotbot for cli settings
  become_user: '{{username}}'
  shell:
    cmd: /home/{{username}}/.local/bin/dotbot -c /home/{{username}}/dotfiles/install.conf.yaml
  register: dotbot_output
  failed_when: not dotbot_output.stdout is search('All tasks executed successfully')
  changed_when: not dotbot_output.stdout is search('Link exists')
  when: dotbot_configure_cli

- name: run dotbot for gui settings
  become_user: '{{username}}'
  shell:
    cmd: /home/{{username}}/.local/bin/dotbot -c /home/{{username}}/dotfiles/install.gui.conf.yaml
  register: dotbot_output
  failed_when: not dotbot_output.stdout is search('All tasks executed successfully')
  changed_when: not dotbot_output.stdout is search('Link exists')
  when: dotbot_configure_gui

# - name: get number of files in zplug repos directory
#   find:
#     path: /home/{{username}}/.zplug/repos
#   register: zplug_repos_find
#   when: zplug_repos_stat.stat.islnk is defined
#   tags: zplug
#
# - name: install zplug plugin repositioris
#   become_user: '{{username}}'
#   shell:
#     cmd: zsh -c 'source /home/{{username}}/.zshrc; zplug install'
#   register: zplug_install
#   # when: zplug_repos_find is defined and zplug_repos_find.matched <= 2
#   failed_when: > # when there is none of the text we expected it should be considered a failure 
#     not zplug_install.stderr is search('no packages to install')
#     and not zplug_install.stdout is search('Installation finished successfully!')
#   changed_when: zplug_install.stdout is search('Installation finished successfully!')
#   tags: zplug
#
# - name: debug
#   debug:
#     msg: '{{zplug_install}}'
#   tags: zplug
#
- name: test starship binary exists
  stat:
    path: /usr/local/bin/starship
  register: test_starship_binary

- name: ensure usr local bin is created
  file:
    path: /usr/local/bin
    state: directory
    mode: '0755'

- name: install starship
  unarchive:
    src: https://github.com/starship/starship/releases/download/v1.11.0/starship-x86_64-unknown-linux-gnu.tar.gz
    dest: /usr/local/bin
    remote_src: yes
  when: not test_starship_binary.stat.exists
