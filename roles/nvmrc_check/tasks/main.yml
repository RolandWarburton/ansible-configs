# get nvmrc target node version
- name: Check if .nvmrc exists
  stat:
    path: '/home/{{username}}/.nvmrc'
  register: nvmrc_stat

- name: Read .nvmrc contents
  slurp:
    src: '/home/{{username}}/.nvmrc'
  register: nvmrc_contents
  when: nvmrc_stat.stat.exists

- name: Set target_node_version variable
  set_fact:
    target_node_version: '{{ nvmrc_contents.content | b64decode | trim }}'

- name: get current node version
  become_user: '{{username}}'
  shell:
    cmd: zsh -i -c "source /home/{{username}}/.zshrc; node --version"
  register: node_current_version
  changed_when: false
  failed_when: false

- name: Set fact for node installation
  set_fact:
    node_installed: "{{ node_current_version.stdout != '' }}"

- name: Print node target version
  debug:
    msg: '{{node_current_version.rc}}'

- name: if node is not installed set the current version to 0.0.0
  set_fact:
    node_version: '0.0.0'
  when: node_current_version.rc != 0

- name: set node_version based on node --version
  set_fact:
    node_version: '{{ node_current_version.stdout[1:] }}'
  when: node_current_version.rc == 0

- name: DEBUG DPKG
  debug:
    msg: '{{target_node_version}} gt {{node_version}}'

- name: Check version comparison of target and actual neovim versions
  shell:
    cmd: dpkg --compare-versions "{{ target_node_version }}" gt "{{ node_version }}"
  register: version_comparison
  ignore_errors: true
  failed_when: false
  changed_when: false

- name: set node_out_of_date fact
  set_fact:
    node_out_of_date: '{{true if version_comparison.rc == 0 else false}}'

- name: Print node version comparison
  debug:
    msg: "Node {{ 'IS out of date' if node_out_of_date else 'is NOT out of date' }} (target: {{target_node_version}}, installed: {{node_version}})"
